<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ai.gzesp.dao.OrderDao">

	
	<select id="queryNumberListByPage" resultType="java.util.HashMap">
	  select *
	    from (	
      select m.*, rownum row_num
        from (	
        select a.serial_number, 
               nvl(a.nice_fee,0)/1000 nice_fee
          from NUM_D_NUMINFO a
         where a.code_state = '1'
           and a.province_code = '85'
          <choose>
		    <when test="net_type_code != null">
			  and a.net_type_code like '%'||#{net_type_code}||'%'
			</when>  
		    <otherwise>
			  and a.net_type_code != '04'
		    </otherwise>
	      </choose>           
            <if test="keyword != null">
               and a.serial_number like '%'||#{keyword}||'%'
            </if>
		    <if test="eparchy_code != null">
			  and a.eparchy_code like '%'||#{eparchy_code}||'%'
			</if>              
            <if test="nice_rule != null">
               and a.nice_rule = #{nice_rule}
            </if>
            <if test="nice_fee_start != null">
               <![CDATA[ 
                 and (a.nice_fee is null or a.nice_fee >= #{nice_fee_start}*1000)
                  ]]>
            </if>
            <if test="nice_fee_end != null">
               <![CDATA[ 
               and (a.nice_fee is null or a.nice_fee <= #{nice_fee_end}*1000)
               ]]>
            </if>
          order by 
          <choose>
		    <when test="sortCol != null">
			  ${sortCol}
			</when>  
		    <otherwise>
			  a.serial_number 
		    </otherwise>
	      </choose>          
          <choose>
		    <when test="sort != null">
			  ${sort}
			</when>  
		    <otherwise>
			  desc
		    </otherwise>
	      </choose>
          ) m
         )
	<![CDATA[
        where row_num > (${pageNum}-1)*${pageSize}
          and row_num <= ${pageNum}*${pageSize}       
     ]]>
	</select>	
	
	<select id="getNumberRules" resultType="java.util.HashMap">
     select distinct nice_rule nice_rule
       from NUM_D_NICERULE_LIMIT 
	</select>	
	
	<update id="updateNumberState" >
	   update num_d_numinfo a
          set a.code_state = '2'
        where serial_number = #{serial_number}
          and a.code_state = '1'
	</update>
	
	<insert id="insertNumberReserve">
       insert into NUM_D_RESERVE
              (serial_number, code_state, add_time)
       values(#{serial_number}, #{code_state}, sysdate)	
	</insert>
	
	<update id="updateGoodsAmount" >
      update gds_d_amount
         set goods_amount = 
            (case when amount_type='1' then goods_amount-1 
                  when amount_type='2' then goods_amount+1 
                  else 0 end)
        where goods_id = ${goods_id}
	</update>
	
	<update id="updateGoodsAmountReverse" >
      update gds_d_amount
         set goods_amount = 
            (case when amount_type='1' then goods_amount+1 
                  when amount_type='2' then goods_amount-1 
                  else 0 end)
        where goods_id in
              <foreach collection="goodIds" item="goods_id" index="index"
                  open="(" close=")" separator=",">
                   ${goods_id}
              </foreach>
	</update>			
	
	<select id="getNetTypeByGoodsId" resultType="java.util.HashMap">
     select a.goods_id ,
            b.res_id,
            c.attr_code,
            c.attr_val_name,
            c.attr_val_code,
            c.values1
       from GDS_D_INFO a ,
            REL_GOODS_RES b,
            RES_D_ATTRVAL c
      where a.goods_id = ${goods_id}
        and a.goods_id = b.goods_id
        and b.res_id = c.res_id
        and c.attr_code = 'NETTYPE'
	</select>	
	
	<select id="queryNumbersTimeout" resultType="java.util.HashMap">
      <![CDATA[
     select serial_number, code_state
       from NUM_D_RESERVE
      where add_time <= sysdate - 1/(24*2)
        and code_state = '2'
         ]]>    
	</select>	
	
	<select id="queryOrdersTimeout" resultType="java.util.HashMap">
      <![CDATA[
      select to_char(a.order_id) order_id,
             to_char(c.goods_id) goods_id
        from ord_d_base a,
             ord_d_paylog b,
             ord_d_prod c
       where a.order_id = b.order_id(+)
         and a.create_time <= sysdate - 1/(24*2)
         and b.pay_id is null 
         and a.order_id = c.order_id
         ]]>    
	</select>
	
	<select id="queryOrdersTimeout2_bak" resultType="java.util.HashMap">
      <![CDATA[
        select to_char(a.order_id) order_id,
             to_char(c.goods_id) goods_id
        from ord_d_base a,
             ord_d_pay b,
             ord_d_prod c
       where a.order_id = b.order_id(+)
         and a.create_time <= sysdate - 1/(24*2)
         and a.create_time >= to_date('20150603120000','yyyymmddhh24miss')
         and (b.order_id is null or b.pay_state = '2')
         and a.order_state <> '99'
         and a.order_id = c.order_id
         ]]>    
	</select>
	
	<select id="queryOrdersTimeout2" resultType="java.util.HashMap">
      <![CDATA[
        select to_char(a.order_id) order_id,
             to_char(c.goods_id) goods_id
        from ord_d_base a,
             ord_d_prod c
       where a.create_time <= sysdate - 1/(24*2)
         and a.create_time >= to_date('20150603120000','yyyymmddhh24miss')
         and a.order_state = '00'
         and a.order_id = c.order_id
         ]]>    
	</select>				
	
	<update id="releaseNumberState" >
	   update num_d_numinfo a
          set a.code_state = '1'
        where serial_number in
              <foreach collection="numbers" item="serial_number" index="index"
                  open="(" close=")" separator=",">
                   #{serial_number}
              </foreach>
	</update>	
	
	<delete id="deleteNumberReserve">
	   delete from NUM_D_RESERVE
        where serial_number in
              <foreach collection="numbers" item="serial_number" index="index"
                  open="(" close=")" separator=",">
                   #{serial_number}
              </foreach>
	</delete>	
	
	<select id="getNumberByOrderId" resultType="java.util.HashMap">
      select RES_ATTR_VAL serial_number
        from ORD_D_RES
       where order_id = ${order_id}
         and RES_ATTR_CODE = 'NUMBERS'
	</select>	
	
	<delete id="deleteOrderBaseInfo">
	   delete from ORD_D_BASE
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<delete id="deleteOrderCustInfo">
	   delete from ORD_D_CUST
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>	
	
	<delete id="deleteOrderDealInfo">
	   delete from ORD_D_DEAL
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>	
	
	<delete id="deleteOrderPostInfo">
	   delete from ORD_D_POST
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<delete id="deleteOrderResInfo">
	   delete from ORD_D_RES
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<delete id="deleteOrderCMSPreFee">
	   delete from ORD_D_PRECMSFEE
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<delete id="deleteOrderProdInfo">
	   delete from ORD_D_PROD
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<delete id="deleteOrderCMSStateInfo">
	   delete from ORD_D_CMSSTATE
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>	
	
	<delete id="deleteOrderPreCMSFeeInfo">
	   delete from ORD_D_PRECMSFEE
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</delete>
	
	<update id="updateOrderBaseState" >
	   update ord_d_base a
          set a.order_state = '99'
        where order_id in
              <foreach collection="orderIds" item="order_id" index="index"
                  open="(" close=")" separator=",">
                   #{order_id}
              </foreach>
	</update>		
	<select id="queryOrdersDealLogByOrderId" resultType="java.util.HashMap">
	select a.*,
	        to_char(a.operate_time, 'yyyy') year,
	        to_char(a.operate_time, 'mm-dd') month_day,
	        to_char(a.operate_time, 'hh24:mi') hour_minute,
	        case when a.current_state ='01' then
	                  '待分配：正在将订单分配给生产人员'
	             when a.current_state ='02' then
	                  '待处理：已将订单分配至生产人员'
	             when a.current_state ='03' then
	                  '处理中：生产人员正在飞速操作'
	             when a.current_state ='04' then
	                  '无'
	             when a.current_state ='05' then
	                  '无'
	             when a.current_state ='06' then
	                  '物流在途'
	             when a.current_state ='07' then
	                  '本人已签收，待归档'
	             when a.current_state ='08' then
	                  '成功关闭（已归档）'
	             when a.current_state ='09' then
	                  '无'
	             when a.current_state ='10' then
	                  '无'
	             when a.current_state ='11' then
	                  '用户申请退款，店主审核中'
	             when a.current_state ='12' then
	                  '用户申请退款，管理员审核中'
	             when a.current_state ='13' then
	                  '退款审核未通过'
	             when a.current_state ='14' then
	                  '退款审核通过，已退款'
	        end current_state_content  
	   from ord_l_deallog a
       where order_id = ${order_id} order by current_state
	</select>		
										
	<select id="queryCZCard" resultType="java.util.HashMap">
		select *
		  from (select tt.*, ROWNUM as rowno
		          from (select a.*, goods_name
		                  from ord_d_card_pay a, gds_d_info b
		                 where b.goods_id = a.goods_id
		                 and a.user_id=#{user_id}
		                 <if test="startDate != null">
							<![CDATA[and a.CREATE_TIME >=to_date(#{startDate},'yyyy-mm-dd') and a.CREATE_TIME < to_date(#{endDate},'yyyy-mm-dd')+1]]>
            			 </if>
		                 <if test="czcard_no != null">
               				and a.PHONE_NUMBER=#{czcard_no}
            			 </if>
		                 ) tt
		               <![CDATA[where Rownum <= ${hidepageindex}+3) table_alias
		 where table_alias.rowno >= ${hidepageindex}]]>
	</select>
	<select id="queryBandGoodsId" resultType="java.util.HashMap">
		select goods_id from gds_d_info a where ctlg_code = #{ctlg_code}
	</select>
	<select id="queryBandProByOrderId" resultType="java.util.HashMap">
		select order_id,partition_id,goods_id,user_id,order_from,bandnumid,product_id,topay_money,nvl(income_money,'0') income_money,order_state,order_type,values1,values2,to_char(create_time,'YYYYMMDDHHMMSS') create_time,update_time,original_price from ORD_D_BAND_PAY where order_id=#{order_id}
	</select>	
	
	<insert id="insertBSSLog">
       insert into BSS_B_LOG
              (
				log_id,			
				partition_id,	
				interfacename,
				create_time,
				result_code,
				user_id,
				band_numid,
				user_name,
				actprovince,
				actcity,
				nettype,
				paytype,
				userstatus,
				usertype,
				currproinfo,
				proinfo,
				finalproinfo,
				order_id
              )
       values(
				#{log_id},			
				#{partition_id},	
				#{interfacename},
				to_date(#{create_time},'yyyymmddhh24miss'),
				#{result_code},
				#{user_id},
				#{band_numid},
				#{user_name},
				#{actprovince},
				#{actcity},
				#{nettype},
				#{paytype},
				#{userstatus},
				#{usertype},
				#{curproinfo},
				#{proinfo},
				#{finalproinfo},
				#{order_id}
       )	
	</insert>
	
	<select id="queryBandOrderByDate" resultType="java.util.LinkedHashMap">
		select distinct to_char(a.order_id) order_id,
		       a.bandnumid,
		       decode(a.order_state, '02', '1', '0') order_state,
		       to_char(a.create_time,'yyyy/MM/dd  HH24:mi:SS') create_time
		  from ORD_D_BAND_PAY a, BSS_B_LOG b
		 where a.order_id = b.order_id
		 <![CDATA[
		 and a.create_time>=to_date(to_date('2015/8/7 13:48:50','yyyy/MM/dd  HH24:mi:SS'))
     	 and a.create_time<to_date(to_date('2015/8/7 13:48:50','yyyy/MM/dd  HH24:mi:SS')+1)
     	]]>
	</select>
	
	<update id="updateOrdBandPay">
		update ord_d_band_pay set order_state=#{order_state},update_time=sysdate where order_id=#{order_id}
	</update>
	
	
	<select id="queryOfflineOrders" resultType="java.util.HashMap">
       select *
         from 
         (
          select m.*, rownum row_num
            from 
            (
              select to_char(a.order_id) order_id,
                     to_char(a.create_time, 'yyyy-mm-dd hh24:mi:ss') create_time,
                     case when b.pspt_no is null then '0' else '1' end is_ok,
                     'http://res.woboss.gz186.com'||f.photo_links photo_links,
                     c.goods_name,
                     to_char(a.income_money/1000) income_money,
                     g.res_attr_val serial_number,
                     to_char(c.goods_id) goods_id,
                     to_char(c.ctlg_code) ctlg_code,
                     (select res_attr_val from ord_d_res where order_id = a.order_id and res_attr_code = 'NETTYPE') net_type,
                     (select res_attr_val from ord_d_res where order_id = a.order_id and res_attr_code = 'PACKRES') package,
                     (select res_attr_val from ord_d_res where order_id = a.order_id and res_attr_code = 'FMONTHD') first_month,
                     (select res_attr_val from ord_d_res where order_id = a.order_id and res_attr_code = 'PAGERES') months,
                     (select res_attr_val from ord_d_res where order_id = a.order_id and res_attr_code = 'SAVEMEY') save_money
                from ord_d_base a ,
                     ord_d_cust b,
                     ord_d_prod c,
                     ord_d_deal d,
                     gds_d_info e,
                     gds_d_photo f,
                     (select * from ord_d_res where res_attr_code = 'NUMBERS') g
               where a.order_id = b.order_id
               <if test="start_day != null and start_day != ''">
               	<![CDATA[
                 and a.create_time >= to_date(#{start_day}, 'yyyy-mm-dd')
                ]]>
               </if> 
               <if test="end_day != null and end_day != ''">
               	<![CDATA[ 
                 and a.create_time < to_date(#{end_day}, 'yyyy-mm-dd')+1
                 ]]>
               </if>
                 and a.income_money > 0
               <choose>
		         <when test="is_ok == '0'">
			       and b.pspt_no is null
			     </when>
			     <when test="is_ok == '1'">
			       and b.pspt_no is not null
			     </when>  
		         <otherwise>
		         
		         </otherwise>
	           </choose>                       
                 and a.order_id = c.order_id
                 and c.goods_id = e.goods_id
                 and e.album_id = f.album_id
                 and f.default_tag = '0'
                 and a.order_id = d.order_id
                 and d.user_id = #{user_id}
                 and a.order_id = g.order_id
                 <if test="phone_number != null">
                   and g.res_attr_val like '%'||#{phone_number}||'%'
                 </if>
                 <if test="order_id != null">
                   and a.order_id like '%'||#{order_id}||'%'
                 </if>
               order by a.create_time
             ) m
          )
	<![CDATA[
        where row_num > (${pageNum}-1)*${pageSize}
          and row_num <= ${pageNum}*${pageSize}       
     ]]>          
	</select>

	<update id="updateOrderPsptNo">
		update ord_d_cust 
		   set pspt_no = #{pspt_no},
		       cust_name = #{cust_name}
		 where order_id = #{order_id}
	</update>
	
	<update id="updateOrderCustName">
		update ord_d_post 
		   set receiver_name = #{cust_name}
		 where order_id = #{order_id}
	</update>
	
	<update id="updateOrderState">
		update ord_d_base 
		   set order_state = '07'
		 where order_id = #{order_id}
		    
	</update>		
	
	<update id="updateOrderArchive">
		update ord_d_base 
		   set order_state = '08'
		 where order_id = #{order_id}
		    
	</update>		
	
	<select id="queryAllPke" resultType="java.util.HashMap">
		select to_char(a.goods_id) goods_id, to_char(a.ctlg_code) ctlg_code, a.goods_name, a.package, a.first_month, a.save_money, a.months, 
		       a.pre_fee, a.pke, a.product_id, a.product_name,
		       a.package_id, a.package_name, a.element_id, a.element_name, 
		       a.activity_type, a.activity_id, a.activity_name
		  from gds_d_pke a
		 <if test="goods_id != null">
         where a.goods_id like = #{goods_id}
         </if>
	</select>
			
</mapper>