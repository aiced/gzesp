<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation=" 
	  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd          
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd          
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd          
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd          
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd          
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
      http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
      >

  <context:component-scan base-package="com.ai" />
  
	<!-- 缓存注解驱动 -->
<!-- 	<cache:annotation-driven cache-manager="ehCacheManager" /> -->
	<!-- 启动aop切面编程注解 -->
	<aop:aspectj-autoproxy />
	
	<context:component-scan base-package="com.ai.sysframe.aop">	
        <context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
    </context:component-scan>
    
    <context:component-scan base-package="com.ai.gzesp.security">	
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <bean class="com.ai.sysframe.exception.MyHandlerExceptionResolver"/>


    <!-- 属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				  <value>classpath:spring/jdbc_mysql.properties</value>
			</list>
		</property>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- 数据库连接池 -->
	<!--  
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="60" />
		<property name="maxActive" value="600" />
		<property name="maxIdle" value="50" />
		<property name="minIdle" value="20" />
		<property name="maxWait" value="3000" />
		<property name="poolPreparedStatements" value="false" />
		<property name="defaultAutoCommit" value="false" />
		<property name= "testWhileIdle" value="true" />  
        <property name= "testOnBorrow" value="false" />  
        <property name= "testOnReturn" value="false" />  
        <property name= "validationQuery" value="select 1 from dual" />  
        <property name= "timeBetweenEvictionRunsMillis" value="30000" />  
        <property name= "numTestsPerEvictionRun" value="30" />
        <property name="minEvictableIdleTimeMillis" value="1800000" />  
	</bean>
	-->
	<!-- jndi 方式获取datasource ，配置在 META-INFO/context.xml 
	         兼容Tomcat和Weblogic的Spring 数据源JNDI配置 
	         当resource-ref属性为true时，jndiName会被添加java:comp/env/，而这个正是Tomcat查找JNDI的地方，所以Tomcat能用！ 
	-->
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/ucr_gz" resource-ref="true"/>
	
    <!-- Mybatis's sqlSessionFactory config -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- <property name="mapperLocations" value="classpath*:mybatis/mapper/*.xml" /> -->
	</bean>
	
	<bean id = "jdbcTemplate"   class = "org.springframework.jdbc.core.JdbcTemplate">    
         <property name = "dataSource" ref="dataSource"/>    
    </bean> 
	
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 启用事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="*" timeout="10" />
		</tx:attributes>
	</tx:advice>
 
	<!-- 需要事务拦截的路径 -->
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* com.ai.gzesp.service.OrderService.*(..)) 
                          or execution(* com.ai.gzesp.service.SelectNumberService.*(..)) 
                          or execution(* com.ai.gzesp.service.UnionPayService.*Tx(..))
                          or execution(* com.ai.gzesp.service.WeShopService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
       <!-- 
        <aop:aspect ref="exceptionHandler" >
        	<aop:before method="logAction" pointcut-ref="serviceOperation" />
        	<aop:after-throwing method="logException" pointcut-ref="serviceOperation" />
        </aop:aspect>
         -->
    </aop:config>
 
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/weShop/insteadBuy/*" />
            <bean class="com.ai.sysframe.token.InsteadInterceptor"/>
		</mvc:interceptor>	
		<mvc:interceptor>
			<mvc:mapping path="/**" />
            <bean class="com.ai.sysframe.token.TokenInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>

    <!-- scan mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ai.gzesp.dao" />
    </bean>

	<!-- 声明ehCacheManager -->
<!-- 	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cache-manager-ref="ehcache" /> -->

	<!-- ehCacheManager工厂类 -->
<!-- 	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:config-location="classpath:ehcache.xml" /> -->

<!-- 	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<ref bean="limitInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors> -->
	
	
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 设置上传文件的最大尺寸为1024*1024*20MB -->  
	    <property name="maxUploadSize">  
	        <value>20971520</value>  
	    </property>
	    <property name="resolveLazily" value="true"/>  
    </bean>
     
</beans>

